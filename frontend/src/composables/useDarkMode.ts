/* ================================
   src/composables/useDarkMode.ts
   GÃ¨re le mode dark/light
   ================================ */

import { ref, watch } from 'vue'

// ðŸŒ™ Variable rÃ©active pour savoir si le mode dark est actif
export const isDark = ref(false)

// ðŸ”§ Composable pour gÃ©rer le mode dark
export const useDarkMode = () => {
  
  // ðŸš€ Initialise le mode dark au dÃ©marrage
  const initDarkMode = () => {
    // ðŸ’¾ RÃ©cupÃ¨re la prÃ©fÃ©rence du localStorage
    const saved = localStorage.getItem('darkMode')
    
    if (saved !== null) {
      // âœ… Si une prÃ©fÃ©rence existe, l'utilise
      isDark.value = JSON.parse(saved)
    } else {
      // âœ… Sinon, utilise la prÃ©fÃ©rence systÃ¨me
      isDark.value = window.matchMedia('(prefers-color-scheme: dark)').matches
    }
    
    // ðŸŽ¨ Applique le mode dark Ã  la page
    applyDarkMode()
  }

  // ðŸ”„ Bascule le mode dark/light
  const toggleDarkMode = () => {
    isDark.value = !isDark.value
    
    // ðŸ’¾ Sauvegarde la prÃ©fÃ©rence dans localStorage
    localStorage.setItem('darkMode', JSON.stringify(isDark.value))
    
    // ðŸŽ¨ Applique le changement
    applyDarkMode()
  }

  // ðŸŽ¨ Applique le mode dark Ã  la page
  const applyDarkMode = () => {
    // ðŸŽ¯ Attendre le prochain frame pour assurer que le DOM est mis Ã  jour
    requestAnimationFrame(() => {
      const htmlElement = document.documentElement
      
      if (isDark.value) {
        // âœ… Ajoute la classe "dark" Ã  <html>
        // Tailwind utilise cette classe pour appliquer les styles dark
        htmlElement.classList.add('dark')
      } else {
        // âœ… Supprime la classe "dark" de <html>
        htmlElement.classList.remove('dark')
      }
      
      console.log('ðŸŒ™ Mode sombre appliquÃ©:', isDark.value)
    })
  }

  // ðŸ‘€ Observer: Chaque fois que isDark change, applique le changement
  watch(isDark, applyDarkMode)

  // ðŸ“¤ Exporte les fonctions et variables
  return {
    isDark,              // Variable rÃ©active
    toggleDarkMode,      // Fonction pour basculer
    initDarkMode,        // Fonction pour initialiser
  }
}